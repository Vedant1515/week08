name: Backend CI â€” Test, Build, Push

on:
  pull_request:
    branches: [ develop, main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  push:
    branches: [ develop, main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  workflow_dispatch: {}

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }} # e.g. myacr.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
  K8S_NAMESPACE: week08

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Lint and test product_service
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Lint and test order_service
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    steps:
      - uses: actions/checkout@v4

      # OIDC login to Azure. If you must keep service principal: swap this step to azure/login@v1 with creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
        run: |
          set -e
          if [ -z "$ACR_LOGIN_SERVER" ]; then
            echo "ACR_LOGIN_SERVER secret missing (e.g. myacr.azurecr.io)"
            exit 1
          fi
          ACR_NAME="$(echo "$ACR_LOGIN_SERVER" | cut -d. -f1)"
          TOKEN="$(az acr login --name "$ACR_NAME" --expose-token --output tsv --query accessToken)"
          echo "$TOKEN" | docker login "$ACR_LOGIN_SERVER" -u 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Build and push product_service
        run: |
          set -e
          docker build -t $ACR_LOGIN_SERVER/product_service:latest ./backend/product_service
          docker tag  $ACR_LOGIN_SERVER/product_service:latest $ACR_LOGIN_SERVER/product_service:$IMAGE_TAG
          docker push $ACR_LOGIN_SERVER/product_service:latest
          docker push $ACR_LOGIN_SERVER/product_service:$IMAGE_TAG

      - name: Build and push order_service
        run: |
          set -e
          docker build -t $ACR_LOGIN_SERVER/order_service:latest ./backend/order_service
          docker tag  $ACR_LOGIN_SERVER/order_service:latest $ACR_LOGIN_SERVER/order_service:$IMAGE_TAG
          docker push $ACR_LOGIN_SERVER/order_service:latest
          docker push $ACR_LOGIN_SERVER/order_service:$IMAGE_TAG
