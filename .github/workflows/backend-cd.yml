name: CD â€” Deploy Backend to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
      aks_resource_group:
        description: 'AKS resource group'
        required: true
      aks_acr_name:
        description: 'ACR name (no domain)'
        required: true
  workflow_call:
    inputs:
      aks_cluster_name: { required: true, type: string }
      aks_resource_group: { required: true, type: string }
      aks_acr_name: { required: true, type: string }
    outputs:
      product_api_ip:
        description: "Product service external IP"
        value: ${{ jobs.deploy_backend.outputs.PRODUCT_API_IP }}
      order_api_ip:
        description: "Order service external IP"
        value: ${{ jobs.deploy_backend.outputs.ORDER_API_IP }}

env:
  K8S_NAMESPACE: week08
  PRODUCT_SVC: product-service-w08e1
  ORDER_SVC: order-service-w08e1

permissions:
  id-token: write
  contents: read

concurrency:
  group: backend-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --name "${{ inputs.aks_cluster_name }}" \
            --overwrite-existing
          kubectl get nodes

      - name: Attach ACR to AKS
        run: |
          az aks update \
            --name "${{ inputs.aks_cluster_name }}" \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --attach-acr "${{ inputs.aks_acr_name }}"

      - name: Create namespace if missing
        run: |
          kubectl get ns $K8S_NAMESPACE || kubectl create ns $K8S_NAMESPACE

      - name: Deploy backend infrastructure (ConfigMaps, Secrets, DBs)
        working-directory: k8s
        run: |
          set -e
          kubectl apply -n $K8S_NAMESPACE -f configmaps.yaml
          kubectl apply -n $K8S_NAMESPACE -f secrets.yaml
          kubectl apply -n $K8S_NAMESPACE -f product-db.yaml
          kubectl apply -n $K8S_NAMESPACE -f order-db.yaml

      - name: Deploy backend microservices
        working-directory: k8s
        run: |
          set -e
          kubectl apply -n $K8S_NAMESPACE -f product-service.yaml
          kubectl apply -n $K8S_NAMESPACE -f order-service.yaml
          kubectl rollout status -n $K8S_NAMESPACE deploy/product-deployment --timeout=180s || (kubectl -n $K8S_NAMESPACE describe pod -l app=product-service && exit 1)
          kubectl rollout status -n $K8S_NAMESPACE deploy/order-deployment   --timeout=180s || (kubectl -n $K8S_NAMESPACE describe pod -l app=order-service && exit 1)

      - name: Wait for LoadBalancer IPs (max 5 minutes)
        run: |
          set -e
          for i in $(seq 1 60); do
            echo "Attempt $i/60..."
            PRODUCT_IP=$(kubectl get svc $PRODUCT_SVC -n $K8S_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl  get svc $ORDER_SVC  -n $K8S_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product IP: $PRODUCT_IP"
              echo "Order IP:   $ORDER_IP"
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: LoadBalancer IPs not assigned"
            kubectl -n $K8S_NAMESPACE get svc
            exit 1
          fi

      - name: Set output: product IP
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Set output: order IP
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT
