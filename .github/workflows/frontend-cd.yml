name: CD â€” Deploy Frontend to AKS

on:
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'http://X.X.X.X:8000'
        required: true
      order_api_ip:
        description: 'http://Y.Y.Y.Y:8001'
        required: true
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
      aks_resource_group:
        description: 'AKS resource group'
        required: true

  workflow_call:
    inputs:
      product_api_ip: { required: true, type: string }
      order_api_ip:   { required: true, type: string }
      aks_cluster_name: { required: true, type: string }
      aks_resource_group: { required: true, type: string }

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  K8S_NAMESPACE: week08

permissions:
  id-token: write
  contents: read

concurrency:
  group: frontend-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Azure login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
        run: |
          set -e
          ACR_NAME="$(echo "$ACR_LOGIN_SERVER" | cut -d. -f1)"
          TOKEN="$(az acr login --name "$ACR_NAME" --expose-token --output tsv --query accessToken)"
          echo "$TOKEN" | docker login "$ACR_LOGIN_SERVER" -u 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ inputs.aks_resource_group }}" \
            --name "${{ inputs.aks_cluster_name }}" \
            --overwrite-existing
          kubectl get ns

      - name: Create namespace if missing
        run: |
          kubectl get ns $K8S_NAMESPACE || kubectl create ns $K8S_NAMESPACE

      - name: Inject backend IPs into frontend/main.js
        run: |
          set -e
          sed -i "s|_PRODUCT_API_BASE_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_BASE_URL_|${{ inputs.order_api_ip }}|g" frontend/main.js
          echo "Preview of updated endpoints:"
          grep -E "http|https" -n frontend/main.js || true

      - name: Apply frontend manifests
        working-directory: k8s
        run: |
          set -e
          # Ensure your frontend.yaml references image: $ACR_LOGIN_SERVER/frontend:latest
          kubectl apply -n $K8S_NAMESPACE -f frontend.yaml
          kubectl rollout status -n $K8S_NAMESPACE deploy/frontend-deployment --timeout=180s || (kubectl -n $K8S_NAMESPACE describe pod -l app=frontend && exit 1)
